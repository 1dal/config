<?php
namespace Noodlehaus;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-21 at 22:37:22.
 */
class ConfigTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Config
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers                   Noodlehaus\Config::load
     * @covers                   Noodlehaus\Config::loadJson
     * @expectedException        Exception
     * @expectedExceptionMessage JSON parse error
     */
    public function testLoadWithInvalidJson()
    {
        $config = Config::load(__DIR__ . '/mocks/error.json');
    }

    /**
     * @covers                   Noodlehaus\Config::load
     * @covers                   Noodlehaus\Config::loadIni
     * @expectedException        Exception
     * @expectedExceptionMessage INI parse error
     */
    public function testLoadWithInvalidIni()
    {
        $config = Config::load(__DIR__ . '/mocks/error.ini');
    }

    /**
     * @covers                   Noodlehaus\Config::load
     * @covers                   Noodlehaus\Config::loadPhp
     * @expectedException        Exception
     * @expectedExceptionMessage PHP file does not return an array
     */
    public function testLoadWithInvalidPhp()
    {
        $config = Config::load(__DIR__ . '/mocks/error.php');
    }

    /**
     * @covers                   Noodlehaus\Config::__construct
     * @expectedException        Exception
     * @expectedExceptionMessage Configuration file: [ladadeedee] cannot be found
     */
    public function testConstructWithInvalidPath()
    {
        $config = new Config('ladadeedee');
    }

    /**
     * @covers                   Noodlehaus\Config::__construct
     * @expectedException        Exception
     * @expectedExceptionMessage Unsupported configuration format
     */
    public function testConstructWithUnsupportedFormat()
    {
        $config = Config::load(__DIR__ . '/mocks/error.yaml');
    }

    /**
     * @covers       Noodlehaus\Config::__construct
     * @covers       Noodlehaus\Config::loadPhp
     * @covers       Noodlehaus\Config::loadIni
     * @covers       Noodlehaus\Config::loadJson
     * @dataProvider providerConfigFiles
     */
    public function testConstruct($config_path)
    {
        $config = new Config(__DIR__ . $config_path);

        $this->assertEquals('localhost', $config->get('host'));
        $this->assertEquals('80', $config->get('port'));
    }

    /**
     * @covers       Noodlehaus\Config::get
     * @covers       Noodlehaus\Config::loadPhp
     * @covers       Noodlehaus\Config::loadIni
     * @covers       Noodlehaus\Config::loadJson
     * @dataProvider providerConfigFiles
     */
    public function testGet($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $this->assertEquals('localhost', $config->get('host'));
    }

    /**
     * @covers       Noodlehaus\Config::get
     * @covers       Noodlehaus\Config::loadPhp
     * @covers       Noodlehaus\Config::loadIni
     * @covers       Noodlehaus\Config::loadJson
     * @dataProvider providerConfigFiles
     */
    public function testGetWithDefaultValue($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $this->assertEquals(128, $config->get('ttl', 128));
    }

    /**
     * @covers       Noodlehaus\Config::get
     * @covers       Noodlehaus\Config::loadPhp
     * @covers       Noodlehaus\Config::loadIni
     * @covers       Noodlehaus\Config::loadJson
     * @dataProvider providerConfigFiles
     */
    public function testGetNestedKey($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $this->assertEquals('configuration', $config->get('application.name'));
    }

    /**
     * @covers       Noodlehaus\Config::get
     * @covers       Noodlehaus\Config::loadPhp
     * @covers       Noodlehaus\Config::loadIni
     * @covers       Noodlehaus\Config::loadJson
     * @dataProvider providerConfigFiles
     */
    public function testGetNestedKeyWithDefaultValue($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $this->assertEquals(128, $config->get('application.ttl', 128));
    }

    /**
     * @covers       Noodlehaus\Config::get
     * @covers       Noodlehaus\Config::loadPhp
     * @covers       Noodlehaus\Config::loadIni
     * @covers       Noodlehaus\Config::loadJson
     * @dataProvider providerConfigFiles
     */
    public function testGetNonexistentKey($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $this->assertNull($config->get('proxy'));
    }

    /**
     * @covers       Noodlehaus\Config::get
     * @covers       Noodlehaus\Config::loadPhp
     * @covers       Noodlehaus\Config::loadIni
     * @covers       Noodlehaus\Config::loadJson
     * @dataProvider providerConfigFiles
     */
    public function testGetNonexistentNestedKey($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $this->assertNull($config->get('proxy.name'));
    }

    /**
     * @covers       Noodlehaus\Config::get
     * @covers       Noodlehaus\Config::loadPhp
     * @covers       Noodlehaus\Config::loadIni
     * @covers       Noodlehaus\Config::loadJson
     * @dataProvider providerConfigFiles
     */
    public function testGetReturnsArray($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $this->assertArrayHasKey('name', $config->get('application'));
        $this->assertEquals('configuration', $config->get('application.name'));
        $this->assertCount(2, $config->get('application'));
    }

    /**
     * @covers       Noodlehaus\Config::set
     * @dataProvider providerConfigFiles
     */
    public function testSet($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $config->set('region', 'apac');
        $this->assertEquals('apac', $config->get('region'));
    }

    /**
     * @covers       Noodlehaus\Config::set
     * @dataProvider providerConfigFiles
     */
    public function testSetNestedKey($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $config->set('location.country', 'Singapore');
        $this->assertEquals('Singapore', $config->get('location.country'));
    }

    /**
     * @covers       Noodlehaus\Config::set
     * @dataProvider providerConfigFiles
     */
    public function testSetArray($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $config->set('database', array(
            'host' => 'localhost',
            'name' => 'mydatabase'
        ));
        $this->assertTrue(is_array($config->get('database')));
        $this->assertEquals('localhost', $config->get('database.host'));
    }

    /**
     * @covers       Noodlehaus\Config::set
     * @dataProvider providerConfigFiles
     */
    public function testSetAndUnsetArray($config_path)
    {
        $config = new Config(__DIR__ . $config_path);
        $config->set('database', array(
            'host' => 'localhost',
            'name' => 'mydatabase'
        ));
        $this->assertTrue(is_array($config->get('database')));
        $this->assertEquals('localhost', $config->get('database.host'));
        $config->set('database.host', null);
        $this->assertNull($config->get('database.host'));
        $config->set('database', null);
        $this->assertNull($config->get('database'));
    }

    /**
     * Provides names of example configuration files
     */
    public function providerConfigFiles()
    {
        return array(
            array('/mocks/config.ini'),
            array('/mocks/config.json'),
            array('/mocks/config-exec.php'),
            array('/mocks/config.php')
        );
    }

}
